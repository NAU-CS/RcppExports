// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// SqrtS
mat SqrtS(mat S);
RcppExport SEXP _fastM_SqrtS(SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(SqrtS(S));
    return rcpp_result_gen;
END_RCPP
}
// cMVTMLE0
SEXP cMVTMLE0(SEXP x, SEXP nu, SEXP prewhitened, SEXP delta, SEXP maxiter);
RcppExport SEXP _fastM_cMVTMLE0(SEXP xSEXP, SEXP nuSEXP, SEXP prewhitenedSEXP, SEXP deltaSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< SEXP >::type prewhitened(prewhitenedSEXP);
    Rcpp::traits::input_parameter< SEXP >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(cMVTMLE0(x, nu, prewhitened, delta, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// MVTMLE0cpp
mat MVTMLE0cpp(mat X, double NU, bool PREWHITENED, double DELTA, int MAXITER);
RcppExport SEXP _fastM_MVTMLE0cpp(SEXP XSEXP, SEXP NUSEXP, SEXP PREWHITENEDSEXP, SEXP DELTASEXP, SEXP MAXITERSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type NU(NUSEXP);
    Rcpp::traits::input_parameter< bool >::type PREWHITENED(PREWHITENEDSEXP);
    Rcpp::traits::input_parameter< double >::type DELTA(DELTASEXP);
    Rcpp::traits::input_parameter< int >::type MAXITER(MAXITERSEXP);
    rcpp_result_gen = Rcpp::wrap(MVTMLE0cpp(X, NU, PREWHITENED, DELTA, MAXITER));
    return rcpp_result_gen;
END_RCPP
}
// LocalPsi
mat LocalPsi(mat X, double nu, int n, int p, int N);
RcppExport SEXP _fastM_LocalPsi(SEXP XSEXP, SEXP nuSEXP, SEXP nSEXP, SEXP pSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(LocalPsi(X, nu, n, p, N));
    return rcpp_result_gen;
END_RCPP
}
// LocalA
mat LocalA(mat X, double nu, int n, int p, int N, vec evs);
RcppExport SEXP _fastM_LocalA(SEXP XSEXP, SEXP nuSEXP, SEXP nSEXP, SEXP pSEXP, SEXP NSEXP, SEXP evsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< vec >::type evs(evsSEXP);
    rcpp_result_gen = Rcpp::wrap(LocalA(X, nu, n, p, N, evs));
    return rcpp_result_gen;
END_RCPP
}
// LocalDL
double LocalDL(mat X, double nu, int n, int p, int N, mat Xnew, mat a);
RcppExport SEXP _fastM_LocalDL(SEXP XSEXP, SEXP nuSEXP, SEXP nSEXP, SEXP pSEXP, SEXP NSEXP, SEXP XnewSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< mat >::type Xnew(XnewSEXP);
    Rcpp::traits::input_parameter< mat >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(LocalDL(X, nu, n, p, N, Xnew, a));
    return rcpp_result_gen;
END_RCPP
}
// pairdiff
mat pairdiff(mat X);
RcppExport SEXP _fastM_pairdiff(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(pairdiff(X));
    return rcpp_result_gen;
END_RCPP
}
// cMVTMLEsymm1
SEXP cMVTMLEsymm1(SEXP x, SEXP nu, SEXP delta, SEXP maxiter);
RcppExport SEXP _fastM_cMVTMLEsymm1(SEXP xSEXP, SEXP nuSEXP, SEXP deltaSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< SEXP >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(cMVTMLEsymm1(x, nu, delta, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// cMVTMLEsymm2
SEXP cMVTMLEsymm2(SEXP x, SEXP nu, SEXP delta, SEXP maxiter);
RcppExport SEXP _fastM_cMVTMLEsymm2(SEXP xSEXP, SEXP nuSEXP, SEXP deltaSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< SEXP >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(cMVTMLEsymm2(x, nu, delta, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// Tyler0
SEXP Tyler0(SEXP x, SEXP prewhitened, SEXP delta, SEXP maxiter);
RcppExport SEXP _fastM_Tyler0(SEXP xSEXP, SEXP prewhitenedSEXP, SEXP deltaSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type prewhitened(prewhitenedSEXP);
    Rcpp::traits::input_parameter< SEXP >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(Tyler0(x, prewhitened, delta, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// Tyler0cpp
mat Tyler0cpp(mat X, bool PREWHITENED, double DELTA, int MAXITER);
RcppExport SEXP _fastM_Tyler0cpp(SEXP XSEXP, SEXP PREWHITENEDSEXP, SEXP DELTASEXP, SEXP MAXITERSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type PREWHITENED(PREWHITENEDSEXP);
    Rcpp::traits::input_parameter< double >::type DELTA(DELTASEXP);
    Rcpp::traits::input_parameter< int >::type MAXITER(MAXITERSEXP);
    rcpp_result_gen = Rcpp::wrap(Tyler0cpp(X, PREWHITENED, DELTA, MAXITER));
    return rcpp_result_gen;
END_RCPP
}
// TylerLocalPsi
mat TylerLocalPsi(mat X, int n, int p, int N);
RcppExport SEXP _fastM_TylerLocalPsi(SEXP XSEXP, SEXP nSEXP, SEXP pSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(TylerLocalPsi(X, n, p, N));
    return rcpp_result_gen;
END_RCPP
}
// TylerLocalA
mat TylerLocalA(mat X, int n, int p, int N, vec evs);
RcppExport SEXP _fastM_TylerLocalA(SEXP XSEXP, SEXP nSEXP, SEXP pSEXP, SEXP NSEXP, SEXP evsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< vec >::type evs(evsSEXP);
    rcpp_result_gen = Rcpp::wrap(TylerLocalA(X, n, p, N, evs));
    return rcpp_result_gen;
END_RCPP
}
// TylerLocalDL
double TylerLocalDL(mat X, int n, int p, int N, mat Xnew, mat a);
RcppExport SEXP _fastM_TylerLocalDL(SEXP XSEXP, SEXP nSEXP, SEXP pSEXP, SEXP NSEXP, SEXP XnewSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< mat >::type Xnew(XnewSEXP);
    Rcpp::traits::input_parameter< mat >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(TylerLocalDL(X, n, p, N, Xnew, a));
    return rcpp_result_gen;
END_RCPP
}
// Tylersymm1
SEXP Tylersymm1(SEXP x, SEXP delta, SEXP maxiter);
RcppExport SEXP _fastM_Tylersymm1(SEXP xSEXP, SEXP deltaSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(Tylersymm1(x, delta, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// Tylersymm2
SEXP Tylersymm2(SEXP x, SEXP delta, SEXP maxiter);
RcppExport SEXP _fastM_Tylersymm2(SEXP xSEXP, SEXP deltaSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(Tylersymm2(x, delta, maxiter));
    return rcpp_result_gen;
END_RCPP
}
