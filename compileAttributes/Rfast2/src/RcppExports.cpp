// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// benchmark
NumericMatrix benchmark(List exprs, SEXP env, const int tim, IntegerVector indices);
RcppExport SEXP _Rfast2_benchmark(SEXP exprsSEXP, SEXP envSEXP, SEXP timSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type exprs(exprsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type env(envSEXP);
    Rcpp::traits::input_parameter< const int >::type tim(timSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(benchmark(exprs, env, tim, indices));
    return rcpp_result_gen;
END_RCPP
}
// add_term
NumericMatrix add_term(Rcpp::NumericVector Y, Rcpp::NumericMatrix Xinc, Rcpp::NumericMatrix Xout, double devi_0, const std::string type, const double tol, const bool logged, const bool parallel, const int maxiters);
RcppExport SEXP _Rfast2_add_term(SEXP YSEXP, SEXP XincSEXP, SEXP XoutSEXP, SEXP devi_0SEXP, SEXP typeSEXP, SEXP tolSEXP, SEXP loggedSEXP, SEXP parallelSEXP, SEXP maxitersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Xinc(XincSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Xout(XoutSEXP);
    Rcpp::traits::input_parameter< double >::type devi_0(devi_0SEXP);
    Rcpp::traits::input_parameter< const std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type logged(loggedSEXP);
    Rcpp::traits::input_parameter< const bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiters(maxitersSEXP);
    rcpp_result_gen = Rcpp::wrap(add_term(Y, Xinc, Xout, devi_0, type, tol, logged, parallel, maxiters));
    return rcpp_result_gen;
END_RCPP
}
// group_col
SEXP group_col(SEXP x, SEXP y, const int length_unique, const string method);
RcppExport SEXP _Rfast2_group_col(SEXP xSEXP, SEXP ySEXP, SEXP length_uniqueSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int >::type length_unique(length_uniqueSEXP);
    Rcpp::traits::input_parameter< const string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(group_col(x, y, length_unique, method));
    return rcpp_result_gen;
END_RCPP
}
// colspml_mle
NumericMatrix colspml_mle(NumericMatrix X, const double tol, const int maxiters, const bool parallel);
RcppExport SEXP _Rfast2_colspml_mle(SEXP XSEXP, SEXP tolSEXP, SEXP maxitersSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiters(maxitersSEXP);
    Rcpp::traits::input_parameter< const bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(colspml_mle(X, tol, maxiters, parallel));
    return rcpp_result_gen;
END_RCPP
}
// fbed_reg
List fbed_reg(Rcpp::NumericVector Y, Rcpp::NumericMatrix X, const double sig, const std::string type, IntegerVector id, int K, bool backward, const double tol, const bool parallel, const int maxiters);
RcppExport SEXP _Rfast2_fbed_reg(SEXP YSEXP, SEXP XSEXP, SEXP sigSEXP, SEXP typeSEXP, SEXP idSEXP, SEXP KSEXP, SEXP backwardSEXP, SEXP tolSEXP, SEXP parallelSEXP, SEXP maxitersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< const std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< bool >::type backward(backwardSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiters(maxitersSEXP);
    rcpp_result_gen = Rcpp::wrap(fbed_reg(Y, X, sig, type, id, K, backward, tol, parallel, maxiters));
    return rcpp_result_gen;
END_RCPP
}
// gamma_reg
List gamma_reg(NumericVector Y, NumericMatrix X, List mod, const double tol, const int maxiters);
RcppExport SEXP _Rfast2_gamma_reg(SEXP YSEXP, SEXP XSEXP, SEXP modSEXP, SEXP tolSEXP, SEXP maxitersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type mod(modSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiters(maxitersSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_reg(Y, X, mod, tol, maxiters));
    return rcpp_result_gen;
END_RCPP
}
// gamma_regs
NumericMatrix gamma_regs(NumericVector Y, NumericMatrix X, const double tol, const bool logged, const bool parallel, const int maxiters);
RcppExport SEXP _Rfast2_gamma_regs(SEXP YSEXP, SEXP XSEXP, SEXP tolSEXP, SEXP loggedSEXP, SEXP parallelSEXP, SEXP maxitersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type logged(loggedSEXP);
    Rcpp::traits::input_parameter< const bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiters(maxitersSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_regs(Y, X, tol, logged, parallel, maxiters));
    return rcpp_result_gen;
END_RCPP
}
// quasi_poisson_only
mat quasi_poisson_only(mat x, colvec y, const double ylogy, const double tol, const int maxiters);
RcppExport SEXP _Rfast2_quasi_poisson_only(SEXP xSEXP, SEXP ySEXP, SEXP ylogySEXP, SEXP tolSEXP, SEXP maxitersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type ylogy(ylogySEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiters(maxitersSEXP);
    rcpp_result_gen = Rcpp::wrap(quasi_poisson_only(x, y, ylogy, tol, maxiters));
    return rcpp_result_gen;
END_RCPP
}
// multinom_reg
List multinom_reg(NumericVector Y, NumericMatrix X0, const double tol, const int maxiters);
RcppExport SEXP _Rfast2_multinom_reg(SEXP YSEXP, SEXP X0SEXP, SEXP tolSEXP, SEXP maxitersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X0(X0SEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiters(maxitersSEXP);
    rcpp_result_gen = Rcpp::wrap(multinom_reg(Y, X0, tol, maxiters));
    return rcpp_result_gen;
END_RCPP
}
// negbin_reg
List negbin_reg(NumericVector Y, NumericMatrix X, const double tol, const int maxiters);
RcppExport SEXP _Rfast2_negbin_reg(SEXP YSEXP, SEXP XSEXP, SEXP tolSEXP, SEXP maxitersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiters(maxitersSEXP);
    rcpp_result_gen = Rcpp::wrap(negbin_reg(Y, X, tol, maxiters));
    return rcpp_result_gen;
END_RCPP
}
// mmp_c
Rcpp::List mmp_c(arma::vec target_vars, arma::mat ds, int max_k, const double thres, const std::string method, Rcpp::List inits, const bool hash_on, Rcpp::Environment stats_kv, Rcpp::Environment pvalues_kv, const bool bws_on);
RcppExport SEXP _Rfast2_mmp_c(SEXP target_varsSEXP, SEXP dsSEXP, SEXP max_kSEXP, SEXP thresSEXP, SEXP methodSEXP, SEXP initsSEXP, SEXP hash_onSEXP, SEXP stats_kvSEXP, SEXP pvalues_kvSEXP, SEXP bws_onSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type target_vars(target_varsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ds(dsSEXP);
    Rcpp::traits::input_parameter< int >::type max_k(max_kSEXP);
    Rcpp::traits::input_parameter< const double >::type thres(thresSEXP);
    Rcpp::traits::input_parameter< const std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type inits(initsSEXP);
    Rcpp::traits::input_parameter< const bool >::type hash_on(hash_onSEXP);
    Rcpp::traits::input_parameter< Rcpp::Environment >::type stats_kv(stats_kvSEXP);
    Rcpp::traits::input_parameter< Rcpp::Environment >::type pvalues_kv(pvalues_kvSEXP);
    Rcpp::traits::input_parameter< const bool >::type bws_on(bws_onSEXP);
    rcpp_result_gen = Rcpp::wrap(mmp_c(target_vars, ds, max_k, thres, method, inits, hash_on, stats_kv, pvalues_kv, bws_on));
    return rcpp_result_gen;
END_RCPP
}
// weib_regs
NumericMatrix weib_regs(NumericVector Y, NumericMatrix X, const double tol, const bool logged, const int maxiters, const bool parallel);
RcppExport SEXP _Rfast2_weib_regs(SEXP YSEXP, SEXP XSEXP, SEXP tolSEXP, SEXP loggedSEXP, SEXP maxitersSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type logged(loggedSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiters(maxitersSEXP);
    Rcpp::traits::input_parameter< const bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(weib_regs(Y, X, tol, logged, maxiters, parallel));
    return rcpp_result_gen;
END_RCPP
}
// welch_tests
NumericMatrix welch_tests(NumericMatrix X, NumericVector Y, const bool logged, const bool parallel);
RcppExport SEXP _Rfast2_welch_tests(SEXP XSEXP, SEXP YSEXP, SEXP loggedSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const bool >::type logged(loggedSEXP);
    Rcpp::traits::input_parameter< const bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(welch_tests(X, Y, logged, parallel));
    return rcpp_result_gen;
END_RCPP
}
