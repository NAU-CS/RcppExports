// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// estimCov_ev_CPP
NumericMatrix estimCov_ev_CPP(NumericMatrix data);
RcppExport SEXP _FDGcopulas_estimCov_ev_CPP(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(estimCov_ev_CPP(data));
    return rcpp_result_gen;
END_RCPP
}
// generatorCPP
/* ************* * generator * ************* input arguments: * value: a real number between 0 and 1 * type: the type of function wanted  * family: parametric family for the generators  * parameter: a real parameter  * type: 1 = derivative, 2 = generator, 3 = inverse * family: 1 = frechet, 2 = cuadrasauge, 3 = sinus, 4 = exponential */  double generatorCPP(double value, int type, double parameter, int family);
RcppExport SEXP _FDGcopulas_generatorCPP(SEXP valueSEXP, SEXP typeSEXP, SEXP parameterSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type parameter(parameterSEXP);
    Rcpp::traits::input_parameter< int >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(generatorCPP(value, type, parameter, family));
    return rcpp_result_gen;
END_RCPP
}
// randGenCPP
NumericMatrix randGenCPP(int sampleSize, int family, NumericVector parameter, NumericVector latent, NumericMatrix v);
RcppExport SEXP _FDGcopulas_randGenCPP(SEXP sampleSizeSEXP, SEXP familySEXP, SEXP parameterSEXP, SEXP latentSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type sampleSize(sampleSizeSEXP);
    Rcpp::traits::input_parameter< int >::type family(familySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type parameter(parameterSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type latent(latentSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(randGenCPP(sampleSize, family, parameter, latent, v));
    return rcpp_result_gen;
END_RCPP
}
// randGenCPP_2
NumericMatrix randGenCPP_2(int sampleSize, int family, NumericVector parameter);
RcppExport SEXP _FDGcopulas_randGenCPP_2(SEXP sampleSizeSEXP, SEXP familySEXP, SEXP parameterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type sampleSize(sampleSizeSEXP);
    Rcpp::traits::input_parameter< int >::type family(familySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type parameter(parameterSEXP);
    rcpp_result_gen = Rcpp::wrap(randGenCPP_2(sampleSize, family, parameter));
    return rcpp_result_gen;
END_RCPP
}
// randGen_ev_CPP
NumericMatrix randGen_ev_CPP(int sampleSize, int family, NumericVector parameter, NumericVector latent, NumericMatrix v, int underlyingSampleSize);
RcppExport SEXP _FDGcopulas_randGen_ev_CPP(SEXP sampleSizeSEXP, SEXP familySEXP, SEXP parameterSEXP, SEXP latentSEXP, SEXP vSEXP, SEXP underlyingSampleSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type sampleSize(sampleSizeSEXP);
    Rcpp::traits::input_parameter< int >::type family(familySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type parameter(parameterSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type latent(latentSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type underlyingSampleSize(underlyingSampleSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(randGen_ev_CPP(sampleSize, family, parameter, latent, v, underlyingSampleSize));
    return rcpp_result_gen;
END_RCPP
}
// randGen_ev_CPP_2
NumericMatrix randGen_ev_CPP_2(int sampleSize, int family, NumericVector parameter, int underlyingSampleSize);
RcppExport SEXP _FDGcopulas_randGen_ev_CPP_2(SEXP sampleSizeSEXP, SEXP familySEXP, SEXP parameterSEXP, SEXP underlyingSampleSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type sampleSize(sampleSizeSEXP);
    Rcpp::traits::input_parameter< int >::type family(familySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type parameter(parameterSEXP);
    Rcpp::traits::input_parameter< int >::type underlyingSampleSize(underlyingSampleSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(randGen_ev_CPP_2(sampleSize, family, parameter, underlyingSampleSize));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FDGcopulas_estimCov_ev_CPP", (DL_FUNC) &_FDGcopulas_estimCov_ev_CPP, 1},
    {"_FDGcopulas_generatorCPP", (DL_FUNC) &_FDGcopulas_generatorCPP, 4},
    {"_FDGcopulas_randGenCPP", (DL_FUNC) &_FDGcopulas_randGenCPP, 5},
    {"_FDGcopulas_randGenCPP_2", (DL_FUNC) &_FDGcopulas_randGenCPP_2, 3},
    {"_FDGcopulas_randGen_ev_CPP", (DL_FUNC) &_FDGcopulas_randGen_ev_CPP, 6},
    {"_FDGcopulas_randGen_ev_CPP_2", (DL_FUNC) &_FDGcopulas_randGen_ev_CPP_2, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_FDGcopulas(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
