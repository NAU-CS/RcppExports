// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// MHcpp
arma::mat MHcpp(int N, int thin, IntegerVector S, IntegerVector R, double sd_freq, double sd_psi, arma::rowvec p0, double psi_prior);
RcppExport SEXP _ASPBay_MHcpp(SEXP NSEXP, SEXP thinSEXP, SEXP SSEXP, SEXP RSEXP, SEXP sd_freqSEXP, SEXP sd_psiSEXP, SEXP p0SEXP, SEXP psi_priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type S(SSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< double >::type sd_freq(sd_freqSEXP);
    Rcpp::traits::input_parameter< double >::type sd_psi(sd_psiSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< double >::type psi_prior(psi_priorSEXP);
    rcpp_result_gen = Rcpp::wrap(MHcpp(N, thin, S, R, sd_freq, sd_psi, p0, psi_prior));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP ASPBay_MHcpp(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_ASPBay_MHcpp", (DL_FUNC) &_ASPBay_MHcpp, 8},
    {"ASPBay_MHcpp", (DL_FUNC) &ASPBay_MHcpp, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_ASPBay(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
