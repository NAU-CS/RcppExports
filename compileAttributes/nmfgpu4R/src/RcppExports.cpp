// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// nmfgpuVersionString
std::string nmfgpuVersionString();
RcppExport SEXP _nmfgpu4R_nmfgpuVersionString() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(nmfgpuVersionString());
    return rcpp_result_gen;
END_RCPP
}
// initializeAdapters
bool initializeAdapters(std::string nmfgpuRoot);
RcppExport SEXP _nmfgpu4R_initializeAdapters(SEXP nmfgpuRootSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type nmfgpuRoot(nmfgpuRootSEXP);
    rcpp_result_gen = Rcpp::wrap(initializeAdapters(nmfgpuRoot));
    return rcpp_result_gen;
END_RCPP
}
// shutdownAdapters
void shutdownAdapters();
RcppExport SEXP _nmfgpu4R_shutdownAdapters() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    shutdownAdapters();
    return R_NilValue;
END_RCPP
}
// cppChooseGpu
bool cppChooseGpu(int index);
RcppExport SEXP _nmfgpu4R_cppChooseGpu(SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cppChooseGpu(index));
    return rcpp_result_gen;
END_RCPP
}
// cppNumberOfGpu
unsigned cppNumberOfGpu();
RcppExport SEXP _nmfgpu4R_cppNumberOfGpu() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cppNumberOfGpu());
    return rcpp_result_gen;
END_RCPP
}
// cppInfoForGpuIndex
Rcpp::List cppInfoForGpuIndex(unsigned index);
RcppExport SEXP _nmfgpu4R_cppInfoForGpuIndex(SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cppInfoForGpuIndex(index));
    return rcpp_result_gen;
END_RCPP
}
// adapterComputeSinglePrecision
SEXP adapterComputeSinglePrecision(const std::string& algorithm, const std::string& initMethod, Rcpp::NumericMatrix V, int features, int seed, double threshold, unsigned maxiter, unsigned runs, Rcpp::List parameters, bool verbose, bool ssnmf);
RcppExport SEXP _nmfgpu4R_adapterComputeSinglePrecision(SEXP algorithmSEXP, SEXP initMethodSEXP, SEXP VSEXP, SEXP featuresSEXP, SEXP seedSEXP, SEXP thresholdSEXP, SEXP maxiterSEXP, SEXP runsSEXP, SEXP parametersSEXP, SEXP verboseSEXP, SEXP ssnmfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type algorithm(algorithmSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type initMethod(initMethodSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type features(featuresSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< unsigned >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< unsigned >::type runs(runsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type ssnmf(ssnmfSEXP);
    rcpp_result_gen = Rcpp::wrap(adapterComputeSinglePrecision(algorithm, initMethod, V, features, seed, threshold, maxiter, runs, parameters, verbose, ssnmf));
    return rcpp_result_gen;
END_RCPP
}
// adapterComputeDoublePrecision
SEXP adapterComputeDoublePrecision(const std::string& algorithm, const std::string& initMethod, Rcpp::NumericMatrix V, int features, int seed, double threshold, unsigned maxiter, unsigned runs, Rcpp::List parameters, bool verbose, bool ssnmf);
RcppExport SEXP _nmfgpu4R_adapterComputeDoublePrecision(SEXP algorithmSEXP, SEXP initMethodSEXP, SEXP VSEXP, SEXP featuresSEXP, SEXP seedSEXP, SEXP thresholdSEXP, SEXP maxiterSEXP, SEXP runsSEXP, SEXP parametersSEXP, SEXP verboseSEXP, SEXP ssnmfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type algorithm(algorithmSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type initMethod(initMethodSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type features(featuresSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< unsigned >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< unsigned >::type runs(runsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type ssnmf(ssnmfSEXP);
    rcpp_result_gen = Rcpp::wrap(adapterComputeDoublePrecision(algorithm, initMethod, V, features, seed, threshold, maxiter, runs, parameters, verbose, ssnmf));
    return rcpp_result_gen;
END_RCPP
}
// adapterComputeSinglePrecisionSparse
SEXP adapterComputeSinglePrecisionSparse(const std::string& algorithm, const std::string& initMethod, Rcpp::RObject sparseV, int features, int seed, double threshold, unsigned maxiter, unsigned runs, Rcpp::List parameters, bool verbose, bool ssnmf);
RcppExport SEXP _nmfgpu4R_adapterComputeSinglePrecisionSparse(SEXP algorithmSEXP, SEXP initMethodSEXP, SEXP sparseVSEXP, SEXP featuresSEXP, SEXP seedSEXP, SEXP thresholdSEXP, SEXP maxiterSEXP, SEXP runsSEXP, SEXP parametersSEXP, SEXP verboseSEXP, SEXP ssnmfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type algorithm(algorithmSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type initMethod(initMethodSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type sparseV(sparseVSEXP);
    Rcpp::traits::input_parameter< int >::type features(featuresSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< unsigned >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< unsigned >::type runs(runsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type ssnmf(ssnmfSEXP);
    rcpp_result_gen = Rcpp::wrap(adapterComputeSinglePrecisionSparse(algorithm, initMethod, sparseV, features, seed, threshold, maxiter, runs, parameters, verbose, ssnmf));
    return rcpp_result_gen;
END_RCPP
}
// adapterComputeDoublePrecisionSparse
SEXP adapterComputeDoublePrecisionSparse(const std::string& algorithm, const std::string& initMethod, Rcpp::RObject sparseV, int features, int seed, double threshold, unsigned maxiter, unsigned runs, Rcpp::List parameters, bool verbose, bool ssnmf);
RcppExport SEXP _nmfgpu4R_adapterComputeDoublePrecisionSparse(SEXP algorithmSEXP, SEXP initMethodSEXP, SEXP sparseVSEXP, SEXP featuresSEXP, SEXP seedSEXP, SEXP thresholdSEXP, SEXP maxiterSEXP, SEXP runsSEXP, SEXP parametersSEXP, SEXP verboseSEXP, SEXP ssnmfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type algorithm(algorithmSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type initMethod(initMethodSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type sparseV(sparseVSEXP);
    Rcpp::traits::input_parameter< int >::type features(featuresSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< unsigned >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< unsigned >::type runs(runsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type ssnmf(ssnmfSEXP);
    rcpp_result_gen = Rcpp::wrap(adapterComputeDoublePrecisionSparse(algorithm, initMethod, sparseV, features, seed, threshold, maxiter, runs, parameters, verbose, ssnmf));
    return rcpp_result_gen;
END_RCPP
}
// adapterSetCallback
void adapterSetCallback(Rcpp::Function func);
RcppExport SEXP _nmfgpu4R_adapterSetCallback(SEXP funcSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Function >::type func(funcSEXP);
    adapterSetCallback(func);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_nmfgpu4R_nmfgpuVersionString", (DL_FUNC) &_nmfgpu4R_nmfgpuVersionString, 0},
    {"_nmfgpu4R_initializeAdapters", (DL_FUNC) &_nmfgpu4R_initializeAdapters, 1},
    {"_nmfgpu4R_shutdownAdapters", (DL_FUNC) &_nmfgpu4R_shutdownAdapters, 0},
    {"_nmfgpu4R_cppChooseGpu", (DL_FUNC) &_nmfgpu4R_cppChooseGpu, 1},
    {"_nmfgpu4R_cppNumberOfGpu", (DL_FUNC) &_nmfgpu4R_cppNumberOfGpu, 0},
    {"_nmfgpu4R_cppInfoForGpuIndex", (DL_FUNC) &_nmfgpu4R_cppInfoForGpuIndex, 1},
    {"_nmfgpu4R_adapterComputeSinglePrecision", (DL_FUNC) &_nmfgpu4R_adapterComputeSinglePrecision, 11},
    {"_nmfgpu4R_adapterComputeDoublePrecision", (DL_FUNC) &_nmfgpu4R_adapterComputeDoublePrecision, 11},
    {"_nmfgpu4R_adapterComputeSinglePrecisionSparse", (DL_FUNC) &_nmfgpu4R_adapterComputeSinglePrecisionSparse, 11},
    {"_nmfgpu4R_adapterComputeDoublePrecisionSparse", (DL_FUNC) &_nmfgpu4R_adapterComputeDoublePrecisionSparse, 11},
    {"_nmfgpu4R_adapterSetCallback", (DL_FUNC) &_nmfgpu4R_adapterSetCallback, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_nmfgpu4R(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
