// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/Rfast.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// Rank_mean2
NumericVector Rank_mean2(vector<double>& xx, vector<int>& ind);
RcppExport SEXP _Rfast_Rank_mean2(SEXP xxSEXP, SEXP indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vector<double>& >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< vector<int>& >::type ind(indSEXP);
    rcpp_result_gen = Rcpp::wrap(Rank_mean2(xx, ind));
    return rcpp_result_gen;
END_RCPP
}
// Sort_na_first
vector<double> Sort_na_first(vector<double> f, const bool descend);
RcppExport SEXP _Rfast_Sort_na_first(SEXP fSEXP, SEXP descendSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vector<double> >::type f(fSEXP);
    Rcpp::traits::input_parameter< const bool >::type descend(descendSEXP);
    rcpp_result_gen = Rcpp::wrap(Sort_na_first(f, descend));
    return rcpp_result_gen;
END_RCPP
}
// sort_string
vector<string> sort_string(CharacterVector x, const bool descend);
RcppExport SEXP _Rfast_sort_string(SEXP xSEXP, SEXP descendSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type descend(descendSEXP);
    rcpp_result_gen = Rcpp::wrap(sort_string(x, descend));
    return rcpp_result_gen;
END_RCPP
}
// sort_int
vector<int> sort_int(vector<int> x);
RcppExport SEXP _Rfast_sort_int(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vector<int> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sort_int(x));
    return rcpp_result_gen;
END_RCPP
}
// table_sign
NumericVector table_sign(NumericVector x, const bool na, const bool names);
RcppExport SEXP _Rfast_table_sign(SEXP xSEXP, SEXP naSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type na(naSEXP);
    Rcpp::traits::input_parameter< const bool >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(table_sign(x, na, names));
    return rcpp_result_gen;
END_RCPP
}
// add_to_namespace
vector<string> add_to_namespace(const string dir_to_export, const string dir_to_file);
RcppExport SEXP _Rfast_add_to_namespace(SEXP dir_to_exportSEXP, SEXP dir_to_fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const string >::type dir_to_export(dir_to_exportSEXP);
    Rcpp::traits::input_parameter< const string >::type dir_to_file(dir_to_fileSEXP);
    rcpp_result_gen = Rcpp::wrap(add_to_namespace(dir_to_export, dir_to_file));
    return rcpp_result_gen;
END_RCPP
}
// remove_from_namespace
vector<string> remove_from_namespace(const string dir_to_export, vector<string> files_to_remove);
RcppExport SEXP _Rfast_remove_from_namespace(SEXP dir_to_exportSEXP, SEXP files_to_removeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const string >::type dir_to_export(dir_to_exportSEXP);
    Rcpp::traits::input_parameter< vector<string> >::type files_to_remove(files_to_removeSEXP);
    rcpp_result_gen = Rcpp::wrap(remove_from_namespace(dir_to_export, files_to_remove));
    return rcpp_result_gen;
END_RCPP
}
// apply_condition
SEXP apply_condition(SEXP x, string method, string oper, int val);
RcppExport SEXP _Rfast_apply_condition(SEXP xSEXP, SEXP methodSEXP, SEXP operSEXP, SEXP valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< string >::type oper(operSEXP);
    Rcpp::traits::input_parameter< int >::type val(valSEXP);
    rcpp_result_gen = Rcpp::wrap(apply_condition(x, method, oper, val));
    return rcpp_result_gen;
END_RCPP
}
// as_integer
IntegerVector as_integer(SEXP x, const bool sorted, const int init);
RcppExport SEXP _Rfast_as_integer(SEXP xSEXP, SEXP sortedSEXP, SEXP initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type sorted(sortedSEXP);
    Rcpp::traits::input_parameter< const int >::type init(initSEXP);
    rcpp_result_gen = Rcpp::wrap(as_integer(x, sorted, init));
    return rcpp_result_gen;
END_RCPP
}
// as_factor
IntegerVector as_factor(SEXP x);
RcppExport SEXP _Rfast_as_factor(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(as_factor(x));
    return rcpp_result_gen;
END_RCPP
}
// as_factor2
IntegerVector as_factor2(SEXP x);
RcppExport SEXP _Rfast_as_factor2(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(as_factor2(x));
    return rcpp_result_gen;
END_RCPP
}
// check_aliases
List check_aliases(const string path_man, const string path_rf);
RcppExport SEXP _Rfast_check_aliases(SEXP path_manSEXP, SEXP path_rfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const string >::type path_man(path_manSEXP);
    Rcpp::traits::input_parameter< const string >::type path_rf(path_rfSEXP);
    rcpp_result_gen = Rcpp::wrap(check_aliases(path_man, path_rf));
    return rcpp_result_gen;
END_RCPP
}
// check_usage
List check_usage(string path_man, string path_rf);
RcppExport SEXP _Rfast_check_usage(SEXP path_manSEXP, SEXP path_rfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< string >::type path_man(path_manSEXP);
    Rcpp::traits::input_parameter< string >::type path_rf(path_rfSEXP);
    rcpp_result_gen = Rcpp::wrap(check_usage(path_man, path_rf));
    return rcpp_result_gen;
END_RCPP
}
// cholesky_par
SEXP cholesky_par(SEXP AA);
RcppExport SEXP _Rfast_cholesky_par(SEXP AASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type AA(AASEXP);
    rcpp_result_gen = Rcpp::wrap(cholesky_par(AA));
    return rcpp_result_gen;
END_RCPP
}
// cholesky
SEXP cholesky(SEXP AA);
RcppExport SEXP _Rfast_cholesky(SEXP AASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type AA(AASEXP);
    rcpp_result_gen = Rcpp::wrap(cholesky(AA));
    return rcpp_result_gen;
END_RCPP
}
// col_all
SEXP col_all(SEXP x);
RcppExport SEXP _Rfast_col_all(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(col_all(x));
    return rcpp_result_gen;
END_RCPP
}
// row_max_indices
SEXP row_max_indices(NumericMatrix x);
RcppExport SEXP _Rfast_row_max_indices(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(row_max_indices(x));
    return rcpp_result_gen;
END_RCPP
}
// row_min_indices
NumericVector row_min_indices(NumericMatrix x);
RcppExport SEXP _Rfast_row_min_indices(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(row_min_indices(x));
    return rcpp_result_gen;
END_RCPP
}
// col_anovas
NumericVector col_anovas(NumericVector Y, IntegerMatrix X);
RcppExport SEXP _Rfast_col_anovas(SEXP YSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(col_anovas(Y, X));
    return rcpp_result_gen;
END_RCPP
}
// colrint_mle
List colrint_mle(NumericMatrix X, IntegerVector id, const bool ranef, const double tol, const int maxiters, const bool parallel);
RcppExport SEXP _Rfast_colrint_mle(SEXP XSEXP, SEXP idSEXP, SEXP ranefSEXP, SEXP tolSEXP, SEXP maxitersSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< const bool >::type ranef(ranefSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiters(maxitersSEXP);
    Rcpp::traits::input_parameter< const bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(colrint_mle(X, id, ranef, tol, maxiters, parallel));
    return rcpp_result_gen;
END_RCPP
}
// colweibull_mle
NumericMatrix colweibull_mle(NumericMatrix X, const double tol, const int maxiters, const bool parallel);
RcppExport SEXP _Rfast_colweibull_mle(SEXP XSEXP, SEXP tolSEXP, SEXP maxitersSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiters(maxitersSEXP);
    Rcpp::traits::input_parameter< const bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(colweibull_mle(X, tol, maxiters, parallel));
    return rcpp_result_gen;
END_RCPP
}
// dir_knn
NumericMatrix dir_knn(NumericMatrix tXnew, NumericMatrix tX, NumericVector Y, NumericVector K, const std::string type, const bool parallel);
RcppExport SEXP _Rfast_dir_knn(SEXP tXnewSEXP, SEXP tXSEXP, SEXP YSEXP, SEXP KSEXP, SEXP typeSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tXnew(tXnewSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tX(tXSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type K(KSEXP);
    Rcpp::traits::input_parameter< const std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(dir_knn(tXnew, tX, Y, K, type, parallel));
    return rcpp_result_gen;
END_RCPP
}
// dista
NumericMatrix dista(NumericMatrix Xnew, NumericMatrix X, const bool sqr, const string type);
RcppExport SEXP _Rfast_dista(SEXP XnewSEXP, SEXP XSEXP, SEXP sqrSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xnew(XnewSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const bool >::type sqr(sqrSEXP);
    Rcpp::traits::input_parameter< const string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(dista(Xnew, X, sqr, type));
    return rcpp_result_gen;
END_RCPP
}
// dista_index
IntegerMatrix dista_index(NumericMatrix Xnew, NumericMatrix X, const int k, const string type);
RcppExport SEXP _Rfast_dista_index(SEXP XnewSEXP, SEXP XSEXP, SEXP kSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xnew(XnewSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(dista_index(Xnew, X, k, type));
    return rcpp_result_gen;
END_RCPP
}
// get_k_values
colvec get_k_values(rowvec x, const int& k);
RcppExport SEXP _Rfast_get_k_values(SEXP xSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(get_k_values(x, k));
    return rcpp_result_gen;
END_RCPP
}
// dista_values
NumericMatrix dista_values(NumericMatrix Xnew, NumericMatrix X, const int k, const bool sqr, const string type);
RcppExport SEXP _Rfast_dista_values(SEXP XnewSEXP, SEXP XSEXP, SEXP kSEXP, SEXP sqrSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xnew(XnewSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool >::type sqr(sqrSEXP);
    Rcpp::traits::input_parameter< const string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(dista_values(Xnew, X, k, sqr, type));
    return rcpp_result_gen;
END_RCPP
}
// kullback_leibler_dist
NumericMatrix kullback_leibler_dist(NumericMatrix x);
RcppExport SEXP _Rfast_kullback_leibler_dist(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(kullback_leibler_dist(x));
    return rcpp_result_gen;
END_RCPP
}
// jensen_shannon_dist
NumericMatrix jensen_shannon_dist(NumericMatrix x);
RcppExport SEXP _Rfast_jensen_shannon_dist(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(jensen_shannon_dist(x));
    return rcpp_result_gen;
END_RCPP
}
// bhattacharyya_dist
NumericMatrix bhattacharyya_dist(NumericMatrix x);
RcppExport SEXP _Rfast_bhattacharyya_dist(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(bhattacharyya_dist(x));
    return rcpp_result_gen;
END_RCPP
}
// itakura_saito_dist
NumericMatrix itakura_saito_dist(NumericMatrix x);
RcppExport SEXP _Rfast_itakura_saito_dist(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(itakura_saito_dist(x));
    return rcpp_result_gen;
END_RCPP
}
// dist
NumericMatrix dist(NumericMatrix x, const string method, const bool sqr, const int p);
RcppExport SEXP _Rfast_dist(SEXP xSEXP, SEXP methodSEXP, SEXP sqrSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< const string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const bool >::type sqr(sqrSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(dist(x, method, sqr, p));
    return rcpp_result_gen;
END_RCPP
}
// index_dist_vec
IntegerVector index_dist_vec(const int nrw, const int ncl);
RcppExport SEXP _Rfast_index_dist_vec(SEXP nrwSEXP, SEXP nclSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nrw(nrwSEXP);
    Rcpp::traits::input_parameter< const int >::type ncl(nclSEXP);
    rcpp_result_gen = Rcpp::wrap(index_dist_vec(nrw, ncl));
    return rcpp_result_gen;
END_RCPP
}
// euclidean_dist_vec_ina
List euclidean_dist_vec_ina(NumericMatrix x, const bool sqr);
RcppExport SEXP _Rfast_euclidean_dist_vec_ina(SEXP xSEXP, SEXP sqrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type sqr(sqrSEXP);
    rcpp_result_gen = Rcpp::wrap(euclidean_dist_vec_ina(x, sqr));
    return rcpp_result_gen;
END_RCPP
}
// kullback_leibler_dist_vec
NumericVector kullback_leibler_dist_vec(NumericMatrix x);
RcppExport SEXP _Rfast_kullback_leibler_dist_vec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(kullback_leibler_dist_vec(x));
    return rcpp_result_gen;
END_RCPP
}
// bhattacharyya_dist_vec
NumericVector bhattacharyya_dist_vec(NumericMatrix x);
RcppExport SEXP _Rfast_bhattacharyya_dist_vec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(bhattacharyya_dist_vec(x));
    return rcpp_result_gen;
END_RCPP
}
// itakura_saito_dist_vec
NumericVector itakura_saito_dist_vec(NumericMatrix x);
RcppExport SEXP _Rfast_itakura_saito_dist_vec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(itakura_saito_dist_vec(x));
    return rcpp_result_gen;
END_RCPP
}
// dist_vec
NumericVector dist_vec(NumericMatrix x, const string method, const bool sqr, const int p);
RcppExport SEXP _Rfast_dist_vec(SEXP xSEXP, SEXP methodSEXP, SEXP sqrSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< const string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const bool >::type sqr(sqrSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_vec(x, method, sqr, p));
    return rcpp_result_gen;
END_RCPP
}
// eachcol_apply
NumericVector eachcol_apply(NumericMatrix x, NumericVector y, SEXP ind, const char oper, const string method);
RcppExport SEXP _Rfast_eachcol_apply(SEXP xSEXP, SEXP ySEXP, SEXP indSEXP, SEXP operSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type ind(indSEXP);
    Rcpp::traits::input_parameter< const char >::type oper(operSEXP);
    Rcpp::traits::input_parameter< const string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(eachcol_apply(x, y, ind, oper, method));
    return rcpp_result_gen;
END_RCPP
}
// eachrow
SEXP eachrow(SEXP x, SEXP y, const char oper, SEXP meth);
RcppExport SEXP _Rfast_eachrow(SEXP xSEXP, SEXP ySEXP, SEXP operSEXP, SEXP methSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< const char >::type oper(operSEXP);
    Rcpp::traits::input_parameter< SEXP >::type meth(methSEXP);
    rcpp_result_gen = Rcpp::wrap(eachrow(x, y, oper, meth));
    return rcpp_result_gen;
END_RCPP
}
// geom_regs
NumericMatrix geom_regs(NumericVector Y, NumericMatrix X, const double tol, const bool logged, const bool type, const bool parallel, const int maxiters);
RcppExport SEXP _Rfast_geom_regs(SEXP YSEXP, SEXP XSEXP, SEXP tolSEXP, SEXP loggedSEXP, SEXP typeSEXP, SEXP parallelSEXP, SEXP maxitersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type logged(loggedSEXP);
    Rcpp::traits::input_parameter< const bool >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiters(maxitersSEXP);
    rcpp_result_gen = Rcpp::wrap(geom_regs(Y, X, tol, logged, type, parallel, maxiters));
    return rcpp_result_gen;
END_RCPP
}
// glm_logistic
List glm_logistic(NumericMatrix X, NumericVector Y, const double tol, const int maxiters);
RcppExport SEXP _Rfast_glm_logistic(SEXP XSEXP, SEXP YSEXP, SEXP tolSEXP, SEXP maxitersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiters(maxitersSEXP);
    rcpp_result_gen = Rcpp::wrap(glm_logistic(X, Y, tol, maxiters));
    return rcpp_result_gen;
END_RCPP
}
// is_element_string
bool is_element_string(CharacterVector x, basic_string<char> el);
RcppExport SEXP _Rfast_is_element_string(SEXP xSEXP, SEXP elSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< basic_string<char> >::type el(elSEXP);
    rcpp_result_gen = Rcpp::wrap(is_element_string(x, el));
    return rcpp_result_gen;
END_RCPP
}
// logistic_only
SEXP logistic_only(NumericMatrix X, NumericVector Y, const double tol);
RcppExport SEXP _Rfast_logistic_only(SEXP XSEXP, SEXP YSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(logistic_only(X, Y, tol));
    return rcpp_result_gen;
END_RCPP
}
// logistic_only_b
NumericMatrix logistic_only_b(NumericMatrix X, NumericVector Y, const double tol);
RcppExport SEXP _Rfast_logistic_only_b(SEXP XSEXP, SEXP YSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(logistic_only_b(X, Y, tol));
    return rcpp_result_gen;
END_RCPP
}
// poisson_only_b
NumericMatrix poisson_only_b(NumericMatrix X, NumericVector Y, double ylogy, const double tol);
RcppExport SEXP _Rfast_poisson_only_b(SEXP XSEXP, SEXP YSEXP, SEXP ylogySEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type ylogy(ylogySEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(poisson_only_b(X, Y, ylogy, tol));
    return rcpp_result_gen;
END_RCPP
}
// upper_tri
NumericVector upper_tri(NumericMatrix x, const bool dg);
RcppExport SEXP _Rfast_upper_tri(SEXP xSEXP, SEXP dgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type dg(dgSEXP);
    rcpp_result_gen = Rcpp::wrap(upper_tri(x, dg));
    return rcpp_result_gen;
END_RCPP
}
// upper_tri_b
LogicalMatrix upper_tri_b(int nrw, int ncl, const bool dg);
RcppExport SEXP _Rfast_upper_tri_b(SEXP nrwSEXP, SEXP nclSEXP, SEXP dgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nrw(nrwSEXP);
    Rcpp::traits::input_parameter< int >::type ncl(nclSEXP);
    Rcpp::traits::input_parameter< const bool >::type dg(dgSEXP);
    rcpp_result_gen = Rcpp::wrap(upper_tri_b(nrw, ncl, dg));
    return rcpp_result_gen;
END_RCPP
}
// multinom_regs
NumericMatrix multinom_regs(NumericVector Y0, NumericMatrix X0, const double tol, const bool logged, const bool parallel, const int maxiters);
RcppExport SEXP _Rfast_multinom_regs(SEXP Y0SEXP, SEXP X0SEXP, SEXP tolSEXP, SEXP loggedSEXP, SEXP parallelSEXP, SEXP maxitersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y0(Y0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X0(X0SEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type logged(loggedSEXP);
    Rcpp::traits::input_parameter< const bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiters(maxitersSEXP);
    rcpp_result_gen = Rcpp::wrap(multinom_regs(Y0, X0, tol, logged, parallel, maxiters));
    return rcpp_result_gen;
END_RCPP
}
// normlog_reg
List normlog_reg(NumericVector Y, NumericMatrix X, const double tol, const int maxiters);
RcppExport SEXP _Rfast_normlog_reg(SEXP YSEXP, SEXP XSEXP, SEXP tolSEXP, SEXP maxitersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiters(maxitersSEXP);
    rcpp_result_gen = Rcpp::wrap(normlog_reg(Y, X, tol, maxiters));
    return rcpp_result_gen;
END_RCPP
}
// normlog_regs
NumericMatrix normlog_regs(NumericVector Y, NumericMatrix X, NumericMatrix BE, const double con, const double tol, const bool logged, const bool parallel, const int maxiters);
RcppExport SEXP _Rfast_normlog_regs(SEXP YSEXP, SEXP XSEXP, SEXP BESEXP, SEXP conSEXP, SEXP tolSEXP, SEXP loggedSEXP, SEXP parallelSEXP, SEXP maxitersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type BE(BESEXP);
    Rcpp::traits::input_parameter< const double >::type con(conSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type logged(loggedSEXP);
    Rcpp::traits::input_parameter< const bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiters(maxitersSEXP);
    rcpp_result_gen = Rcpp::wrap(normlog_regs(Y, X, BE, con, tol, logged, parallel, maxiters));
    return rcpp_result_gen;
END_RCPP
}
// odds_helper
SEXP odds_helper(SEXP x);
RcppExport SEXP _Rfast_odds_helper(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(odds_helper(x));
    return rcpp_result_gen;
END_RCPP
}
// prop_regs
NumericVector prop_regs(NumericMatrix X, NumericVector Y, const double tol, const std::string varb, const int maxiters);
RcppExport SEXP _Rfast_prop_regs(SEXP XSEXP, SEXP YSEXP, SEXP tolSEXP, SEXP varbSEXP, SEXP maxitersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const std::string >::type varb(varbSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiters(maxitersSEXP);
    rcpp_result_gen = Rcpp::wrap(prop_regs(X, Y, tol, varb, maxiters));
    return rcpp_result_gen;
END_RCPP
}
// prop_reg
List prop_reg(NumericMatrix X, NumericVector Y, const double tol, const int maxiters);
RcppExport SEXP _Rfast_prop_reg(SEXP XSEXP, SEXP YSEXP, SEXP tolSEXP, SEXP maxitersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiters(maxitersSEXP);
    rcpp_result_gen = Rcpp::wrap(prop_reg(X, Y, tol, maxiters));
    return rcpp_result_gen;
END_RCPP
}
// qpois_reg
List qpois_reg(NumericMatrix X, NumericVector Y, const double ylogy, const double tol, const int maxiters);
RcppExport SEXP _Rfast_qpois_reg(SEXP XSEXP, SEXP YSEXP, SEXP ylogySEXP, SEXP tolSEXP, SEXP maxitersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double >::type ylogy(ylogySEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiters(maxitersSEXP);
    rcpp_result_gen = Rcpp::wrap(qpois_reg(X, Y, ylogy, tol, maxiters));
    return rcpp_result_gen;
END_RCPP
}
// rint_reg
List rint_reg(NumericMatrix X, NumericVector Y, IntegerVector id, const double tol, const bool ranef, const int maxiters);
RcppExport SEXP _Rfast_rint_reg(SEXP XSEXP, SEXP YSEXP, SEXP idSEXP, SEXP tolSEXP, SEXP ranefSEXP, SEXP maxitersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type ranef(ranefSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiters(maxitersSEXP);
    rcpp_result_gen = Rcpp::wrap(rint_reg(X, Y, id, tol, ranef, maxiters));
    return rcpp_result_gen;
END_RCPP
}
// rint_regs
NumericMatrix rint_regs(NumericMatrix X, NumericVector Y, IntegerVector id, const double tol, const bool logged, const bool parallel, const int maxiters);
RcppExport SEXP _Rfast_rint_regs(SEXP XSEXP, SEXP YSEXP, SEXP idSEXP, SEXP tolSEXP, SEXP loggedSEXP, SEXP parallelSEXP, SEXP maxitersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type logged(loggedSEXP);
    Rcpp::traits::input_parameter< const bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiters(maxitersSEXP);
    rcpp_result_gen = Rcpp::wrap(rint_regs(X, Y, id, tol, logged, parallel, maxiters));
    return rcpp_result_gen;
END_RCPP
}
// rint_mle
List rint_mle(NumericVector X, IntegerVector id, const bool ranef, const double tol, const int maxiters);
RcppExport SEXP _Rfast_rint_mle(SEXP XSEXP, SEXP idSEXP, SEXP ranefSEXP, SEXP tolSEXP, SEXP maxitersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< const bool >::type ranef(ranefSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiters(maxitersSEXP);
    rcpp_result_gen = Rcpp::wrap(rint_mle(X, id, ranef, tol, maxiters));
    return rcpp_result_gen;
END_RCPP
}
// rmdp
colvec rmdp(NumericMatrix Y, const int h, umat rnd, const int itertime);
RcppExport SEXP _Rfast_rmdp(SEXP YSEXP, SEXP hSEXP, SEXP rndSEXP, SEXP itertimeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const int >::type h(hSEXP);
    Rcpp::traits::input_parameter< umat >::type rnd(rndSEXP);
    Rcpp::traits::input_parameter< const int >::type itertime(itertimeSEXP);
    rcpp_result_gen = Rcpp::wrap(rmdp(Y, h, rnd, itertime));
    return rcpp_result_gen;
END_RCPP
}
// rvmf_h
NumericVector rvmf_h(double n, double ca, double d1, double x0, double m, double k, double b);
RcppExport SEXP _Rfast_rvmf_h(SEXP nSEXP, SEXP caSEXP, SEXP d1SEXP, SEXP x0SEXP, SEXP mSEXP, SEXP kSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type ca(caSEXP);
    Rcpp::traits::input_parameter< double >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< double >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(rvmf_h(n, ca, d1, x0, m, k, b));
    return rcpp_result_gen;
END_RCPP
}
// perm_cor
arma::vec perm_cor(arma::vec x, arma::vec y, const unsigned int r);
RcppExport SEXP _Rfast_perm_cor(SEXP xSEXP, SEXP ySEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(perm_cor(x, y, r));
    return rcpp_result_gen;
END_RCPP
}
// bic_fs_reg
Rcpp::NumericMatrix bic_fs_reg(Rcpp::NumericVector y, Rcpp::NumericMatrix ds, const double tol, const string type);
RcppExport SEXP _Rfast_bic_fs_reg(SEXP ySEXP, SEXP dsSEXP, SEXP tolSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type ds(dsSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(bic_fs_reg(y, ds, tol, type));
    return rcpp_result_gen;
END_RCPP
}
// fs_reg
Rcpp::NumericMatrix fs_reg(Rcpp::NumericVector y, Rcpp::NumericMatrix ds, const double sig, const double tol, const string type);
RcppExport SEXP _Rfast_fs_reg(SEXP ySEXP, SEXP dsSEXP, SEXP sigSEXP, SEXP tolSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type ds(dsSEXP);
    Rcpp::traits::input_parameter< const double >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(fs_reg(y, ds, sig, tol, type));
    return rcpp_result_gen;
END_RCPP
}
// bs_reg
Rcpp::List bs_reg(arma::vec y, arma::mat ds, const double sig, const std::string type);
RcppExport SEXP _Rfast_bs_reg(SEXP ySEXP, SEXP dsSEXP, SEXP sigSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ds(dsSEXP);
    Rcpp::traits::input_parameter< const double >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< const std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(bs_reg(y, ds, sig, type));
    return rcpp_result_gen;
END_RCPP
}
// pc_skel
Rcpp::List pc_skel(arma::mat ds, const string method, const double sig, const unsigned int r, arma::mat stats_init, arma::mat pvalues_init, arma::ivec is_init_vals);
RcppExport SEXP _Rfast_pc_skel(SEXP dsSEXP, SEXP methodSEXP, SEXP sigSEXP, SEXP rSEXP, SEXP stats_initSEXP, SEXP pvalues_initSEXP, SEXP is_init_valsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type ds(dsSEXP);
    Rcpp::traits::input_parameter< const string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const double >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type stats_init(stats_initSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pvalues_init(pvalues_initSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type is_init_vals(is_init_valsSEXP);
    rcpp_result_gen = Rcpp::wrap(pc_skel(ds, method, sig, r, stats_init, pvalues_init, is_init_vals));
    return rcpp_result_gen;
END_RCPP
}
// k_nn
arma::mat k_nn(arma::mat ds_extra, arma::vec y, arma::mat ds, arma::uvec idxs, const std::string dist_type, const std::string type, const std::string method, const unsigned int freq_option, const bool mem_eff);
RcppExport SEXP _Rfast_k_nn(SEXP ds_extraSEXP, SEXP ySEXP, SEXP dsSEXP, SEXP idxsSEXP, SEXP dist_typeSEXP, SEXP typeSEXP, SEXP methodSEXP, SEXP freq_optionSEXP, SEXP mem_effSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type ds_extra(ds_extraSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ds(dsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type idxs(idxsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist_type(dist_typeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type freq_option(freq_optionSEXP);
    Rcpp::traits::input_parameter< const bool >::type mem_eff(mem_effSEXP);
    rcpp_result_gen = Rcpp::wrap(k_nn(ds_extra, y, ds, idxs, dist_type, type, method, freq_option, mem_eff));
    return rcpp_result_gen;
END_RCPP
}
// k_nn_cv
Rcpp::List k_nn_cv(Rcpp::List folds, arma::vec y, arma::mat ds, arma::uvec idxs, const std::string dist_type, const std::string type, const std::string method, const unsigned int freq_option, const bool pred_ret, const bool mem_eff);
RcppExport SEXP _Rfast_k_nn_cv(SEXP foldsSEXP, SEXP ySEXP, SEXP dsSEXP, SEXP idxsSEXP, SEXP dist_typeSEXP, SEXP typeSEXP, SEXP methodSEXP, SEXP freq_optionSEXP, SEXP pred_retSEXP, SEXP mem_effSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type folds(foldsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ds(dsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type idxs(idxsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist_type(dist_typeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type freq_option(freq_optionSEXP);
    Rcpp::traits::input_parameter< const bool >::type pred_ret(pred_retSEXP);
    Rcpp::traits::input_parameter< const bool >::type mem_eff(mem_effSEXP);
    rcpp_result_gen = Rcpp::wrap(k_nn_cv(folds, y, ds, idxs, dist_type, type, method, freq_option, pred_ret, mem_eff));
    return rcpp_result_gen;
END_RCPP
}
// sort_mat
NumericMatrix sort_mat(NumericMatrix x, const bool descend, const bool by_row, const bool stable, const bool parallel);
RcppExport SEXP _Rfast_sort_mat(SEXP xSEXP, SEXP descendSEXP, SEXP by_rowSEXP, SEXP stableSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type descend(descendSEXP);
    Rcpp::traits::input_parameter< const bool >::type by_row(by_rowSEXP);
    Rcpp::traits::input_parameter< const bool >::type stable(stableSEXP);
    Rcpp::traits::input_parameter< const bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(sort_mat(x, descend, by_row, stable, parallel));
    return rcpp_result_gen;
END_RCPP
}
// sort_unique_double
vector<double> sort_unique_double(vector<double> x);
RcppExport SEXP _Rfast_sort_unique_double(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vector<double> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sort_unique_double(x));
    return rcpp_result_gen;
END_RCPP
}
// len_sort_unique_int
int len_sort_unique_int(IntegerVector x);
RcppExport SEXP _Rfast_len_sort_unique_int(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(len_sort_unique_int(x));
    return rcpp_result_gen;
END_RCPP
}
// spml_reg
List spml_reg(NumericMatrix Y, NumericMatrix X, const double tol, const bool seb, const int maxiters);
RcppExport SEXP _Rfast_spml_reg(SEXP YSEXP, SEXP XSEXP, SEXP tolSEXP, SEXP sebSEXP, SEXP maxitersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type seb(sebSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiters(maxitersSEXP);
    rcpp_result_gen = Rcpp::wrap(spml_reg(Y, X, tol, seb, maxiters));
    return rcpp_result_gen;
END_RCPP
}
// topological_sort
IntegerVector topological_sort(IntegerMatrix dag);
RcppExport SEXP _Rfast_topological_sort(SEXP dagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type dag(dagSEXP);
    rcpp_result_gen = Rcpp::wrap(topological_sort(dag));
    return rcpp_result_gen;
END_RCPP
}
// total_dista
double total_dista(NumericMatrix Xnew, NumericMatrix X, const bool sqr);
RcppExport SEXP _Rfast_total_dista(SEXP XnewSEXP, SEXP XSEXP, SEXP sqrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xnew(XnewSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const bool >::type sqr(sqrSEXP);
    rcpp_result_gen = Rcpp::wrap(total_dista(Xnew, X, sqr));
    return rcpp_result_gen;
END_RCPP
}
// pmin_pmax_simple
SEXP pmin_pmax_simple(SEXP x, SEXP y);
RcppExport SEXP _Rfast_pmin_pmax_simple(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(pmin_pmax_simple(x, y));
    return rcpp_result_gen;
END_RCPP
}
// pmin_pmax_na_rm
SEXP pmin_pmax_na_rm(SEXP x, SEXP y);
RcppExport SEXP _Rfast_pmin_pmax_na_rm(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(pmin_pmax_na_rm(x, y));
    return rcpp_result_gen;
END_RCPP
}
// Round
SEXP Round(SEXP x, const int dg, const bool na_rm);
RcppExport SEXP _Rfast_Round(SEXP xSEXP, SEXP dgSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type dg(dgSEXP);
    Rcpp::traits::input_parameter< const bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(Round(x, dg, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// squareform_c
NumericMatrix squareform_c(NumericVector x);
RcppExport SEXP _Rfast_squareform_c(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(squareform_c(x));
    return rcpp_result_gen;
END_RCPP
}
// Match
IntegerVector Match(NumericVector x, NumericVector key);
RcppExport SEXP _Rfast_Match(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(Match(x, key));
    return rcpp_result_gen;
END_RCPP
}
// which_is
vector<int> which_is(DataFrame x, const string method);
RcppExport SEXP _Rfast_which_is(SEXP xSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type x(xSEXP);
    Rcpp::traits::input_parameter< const string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(which_is(x, method));
    return rcpp_result_gen;
END_RCPP
}
// varcomps_mle
List varcomps_mle(NumericVector x, IntegerVector ina, const int n, const double tol);
RcppExport SEXP _Rfast_varcomps_mle(SEXP xSEXP, SEXP inaSEXP, SEXP nSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ina(inaSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(varcomps_mle(x, ina, n, tol));
    return rcpp_result_gen;
END_RCPP
}
// vecdist
SEXP vecdist(SEXP x);
RcppExport SEXP _Rfast_vecdist(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vecdist(x));
    return rcpp_result_gen;
END_RCPP
}
// weib_reg
List weib_reg(NumericVector Y, NumericMatrix X, const double tol, const int maxiters);
RcppExport SEXP _Rfast_weib_reg(SEXP YSEXP, SEXP XSEXP, SEXP tolSEXP, SEXP maxitersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiters(maxitersSEXP);
    rcpp_result_gen = Rcpp::wrap(weib_reg(Y, X, tol, maxiters));
    return rcpp_result_gen;
END_RCPP
}
// weibull_mle
List weibull_mle(NumericVector X, const double tol, const int maxiters);
RcppExport SEXP _Rfast_weibull_mle(SEXP XSEXP, SEXP tolSEXP, SEXP maxitersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiters(maxitersSEXP);
    rcpp_result_gen = Rcpp::wrap(weibull_mle(X, tol, maxiters));
    return rcpp_result_gen;
END_RCPP
}
